@startuml

class Category {
    - Long id
    - String name
    + Long getId()
    + void setId(Long id)
    + String getName()
    + void setName(String name)
}

class Lot {
    - Long id
    - String description
    - double price
    - Category category
    + Long getId()
    + void setId(Long id)
    + String getDescription()
    + void setDescription(String description)
    + double getPrice()
    + void setPrice(double price)
    + Category getCategory()
    + void setCategory(Category category)
}

class User {
    - Long id
    - String username
    - String email
    + Long getId()
    + void setId(Long id)
    + String getUsername()
    + void setUsername(String username)
    + String getEmail()
    + void setEmail(String email)
}

class CategoryController {
    + List<Category> getAllCategories()
    + Category getCategoryById(int id)
    + Category createCategory(Category category)
    + Category updateCategory(int id, Category category)
    + void deleteCategory(int id)
}

class CategoryNotFoundException extends RuntimeException {
    + CategoryNotFoundException(Long id)
}

class LotController {
    + List<Lot> getAllLots()
    + Lot getLotById(int id)
    + Lot createLot(Lot lot)
    + Lot updateLot(int id, Lot lot)
    + void deleteLot(int id)
}

class LotNotFoundAdvice {
    + String lotNotFoundHandler(LotNotFoundException ex)
}

class LotNotFoundException extends RuntimeException {
    + LotNotFoundException(Long id)
}

class UserController {
    + List<User> getAllUsers()
    + User getUserById(int id)
    + User createUser(User user)
    + User updateUser(int id, User user)
    + void deleteUser(int id)
}

class UserNotFoundException extends RuntimeException {
    + UserNotFoundException(Long id)
}

interface CategoryRepository {
    + List<Category> findAll()
    + Category findById(int id)
    + Category save(Category category)
    + void deleteById(int id)
}

interface LotRepository {
    + List<Lot> findAll()
    + Lot findById(int id)
    + Lot save(Lot lot)
    + void deleteById(int id)
}

interface UserRepository {
    + List<User> findAll()
    + User findById(int id)
    + User save(User user)
    + void deleteById(int id)
}

CategoryController --> CategoryRepository
LotController --> LotRepository
UserController --> UserRepository
CategoryRepository --> Category
LotRepository --> Lot
UserRepository --> User

Lot --> Category : @ManyToOne

CategoryNotFoundException -|> RuntimeException
LotNotFoundException -|> RuntimeException
UserNotFoundException -|> RuntimeException
LotNotFoundAdvice --> LotNotFoundException

@enduml

@startuml
!theme plain
top to bottom direction
skinparam linetype ortho

class AuctionApp {
  + AuctionApp(): 
  + main(String[]): void
}
class Category {
  + Category(): 
  + Category(String, Category): 
  - id: Long
  - name: String
  - parentCategory: Category
  + hashCode(): int
  + equals(Object): boolean
  + toString(): String
   name: String
   id: Long
   parentCategory: Category
}
class CategoryController {
  + CategoryController(CategoryRepository): 
  + deleteCategory(Long): void
  + addCategory(Category): Category
  + updateCategory(Category, Long): Category
  + getCategoryById(Long): Category
  + getSubCategoriesByParentId(Long): List<Category>
   allCategories: List<Category>
}
class CategoryNotFoundException {
  ~ CategoryNotFoundException(Long): 
}
interface CategoryRepository << interface >> {
  + findByParentCategoryId(Long): List<Category>
}
class CorsConfig {
  + CorsConfig(): 
  + corsConfigurer(): WebMvcConfigurer
}
class LoadDatabase {
  + LoadDatabase(): 
  ~ initDatabase(LotRepository, CategoryRepository, UserRepository): CommandLineRunner
}
class Lot {
  + Lot(): 
  + Lot(String, String, Double, Double, Date, Date, Category, Category): 
  - category: Category
  - startingDateHours: Date
  - description: String
  - name: String
  - id: Long
  - actualPrice: Double
  - endingDateHours: Date
  - startingPrice: Double
  - subCategory: Category
  + hashCode(): int
  + toString(): String
  + equals(Object): boolean
   name: String
   description: String
   startingDateHours: Date
   category: Category
   startingPrice: Double
   subCategory: Category
   id: Long
   actualPrice: Double
   endingDateHours: Date
}
class LotController {
  ~ LotController(LotRepository, CategoryRepository): 
  ~ replaceLot(Lot, Long): Lot
  + placeBid(Long, Double): ResponseEntity<String>
  ~ all(): List<Lot>
  ~ newLot(Lot): Lot
  ~ one(Long): Lot
  + getByCategory(Long): List<Lot>
  + getBySubCategory(Long): List<Lot>
  ~ deleteLot(Long): void
}
class LotNotFoundAdvice {
  + LotNotFoundAdvice(): 
  ~ LotNotFoundHandler(LotNotFoundException): String
}
class LotNotFoundException {
  ~ LotNotFoundException(Long): 
}
interface LotRepository << interface >> {
  + findBySubCategory_Id(Long): List<Lot>
  + findByCategory(Category): List<Lot>
}
class User {
  + User(String, String, BigDecimal): 
  + User(): 
  - isConnected: boolean
  - wallet: BigDecimal
  - name: String
  - email: String
  - id: Long
  + equals(Object): boolean
  + hashCode(): int
  + toString(): String
   name: String
   id: Long
   email: String
   isConnected: boolean
   wallet: BigDecimal
}
class UserController {
  ~ UserController(UserRepository): 
  ~ debitWallet(Long, BigDecimal): User
  ~ deleteUser(Long): void
  ~ one(Long): User
  ~ replaceUser(User, Long): User
  ~ all(): List<User>
  ~ newUser(User): User
  ~ updateIsConnected(Long, Map<String, Boolean>): User
  ~ creditWallet(Long, BigDecimal): User
}
class UserNotFoundException {
  + UserNotFoundException(Long): 
}
interface UserRepository << interface >>

CategoryController         -[#595959,dashed]->  CategoryNotFoundException : "«create»"
CategoryController        "1" *-[#595959,plain]-> "repository\n1" CategoryRepository        
LoadDatabase               -[#595959,dashed]->  Category                  : "«create»"
LoadDatabase               -[#595959,dashed]->  Lot                       : "«create»"
LoadDatabase               -[#595959,dashed]->  User                      : "«create»"
Lot                       "1" *-[#595959,plain]-> "category\n1" Category                  
LotController              -[#595959,dashed]->  CategoryNotFoundException : "«create»"
LotController             "1" *-[#595959,plain]-> "categoryRepository\n1" CategoryRepository        
LotController              -[#595959,dashed]->  LotNotFoundException      : "«create»"
LotController             "1" *-[#595959,plain]-> "repository\n1" LotRepository             
UserController             -[#595959,dashed]->  UserNotFoundException     : "«create»"
UserController            "1" *-[#595959,plain]-> "userRepository\n1" UserRepository
@enduml